(*********************************************************************************
 * Copyright (c) 2018 ADLINK Technology Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
 * Contributors: 1
 *   Gabriele Baldoni (gabriele (dot) baldoni (at) adlinktech (dot) com ) - OCaml implementation
 *********************************************************************************)

type json <ocaml module="Abs_json"> = abstract
(* Atomit Entity Manifest *)

type address_information <ocaml module="Fos_types"> = abstract

(* Descriptor Related Types *)

type descriptor = {
  ?uuid : string option;
  name : string;
  ?description : string option;
  ?image : image option;
  ?command : command option; (* Present only if hypervisor_type is BARE *)
  computation_requirements : computational_requirements;
  ?geographical_requirements : geographical_requirements option;
  ?energy_requirements : energy_requirements option;
  hypervisor : hv_kind;
  migration_kind :  migr_kind;
  ?configuration : configuration option;
  interfaces : interface list;
  io_ports : io_port list;
  connection_points : connection_point list;
  depends_on : string list;
}


type image = {
  ?uuid : string option;
  ?name : string option;
  uri : string;
  checksum : string; (* SHA1SUM *)
  format : string;

}


type command = {
  binary : string;
  args : string list;
}

type geographical_requirements = {
  ?position : position option;
  ?proximity : proximity list option;
}

type energy_requirements = {
  key : string;
}

(* This is the flavor *)
type computational_requirements =  {
  ?uuid : string option;
  ?name : string option;
  cpu_arch : string;
  cpu_min_freq : int;
  cpu_min_count: int;
  ?gpu_min_count : int option;
  ?fpga_min_count : int option;
  ram_size_mb : float;
  storage_size_gb : float;
  ?duty_cycle : float option;
  (*
  ?min_running_time_minutes : int option;
  ?max_running_time_minutes : int option;
  *)
}

type position = {
  lat : string;
  lon : string;
  radius : float;
}

type proximity = {
  neighbour : string;
  radius : float;
}

type migr_kind = [
  | LIVE
  | COLD
]

type hv_kind = [
  | BARE
  | KVM
  | KVM_UK
  | XEN
  | XEN_UK
  | LXD
  | DOCKER
  | MCU
]

type conf_types = [
  | SCRIPT
  | CLOUD_INIT
]


type configuration = {
  conf_type : conf_types;
  script : string;
  ?ssh_keys : string list option;
}

type interface = {
  name : string;
  is_mgmt : bool;
  if_type : intf_t;
  ?mac_address : string option;
  virtual_interface : vif_type;
  ?cp_id : string option;
}

type vif_type = {
  intf_type : vintf_t;
  vpci : string; (* in case of bridged is the name of the bridge*)
  bandwidth : int;
}


type intf_t = [
  | INTERNAL
  | EXTERNAL
  | WLAN  (* then virtual_interface has to be PHYSICAL *)
  | BLUETOOTH (* then virtual_interface has to be PHYSICAL *)
]

type vintf_t = [
  | PARAVIRT
  | FOS_MGMT
  | PCI_PASSTHROUGH
  | SR_IOV
  | VIRTIO
  | E1000
  | RTL8139
  | PCNET
  | PHYSICAL
  | BRIDGED
]


type io_kind = [
  | GPIO
  | I2C
  | BUS
  | COM
  | CAN
]

type io_port = {
  address : string;
  io_kind : io_kind;
  min_io_ports : int
}

type connection_point = {
  uuid: string;
  ?pair_id : string option;
}

type storage_kind = [
  | BLOCK
  | FILE
  | OBJECT
]

type storage_descriptor = {
  uuid : string;
  storage_type : storage_kind;
  size : int; (* in GB *)
  ?file_system_protocol : string option; (* only in case of FILE storage *)
  ?cp_uuid : string option; (* only in case of FILE storage *)
}



(* CPD as ETSI NFV *)

type cp_kind = [
  | VPORT
]

type connection_point_descriptor = {
  name : string;
  id : string;
  ?short_name : string option;
  ?cp_type : cp_kind option;
  ?port_security_enabled: bool option;
  ?internal_vld_ref : string option;
}

(* VLD at ETSI NFV *)

type vl_kind = [
  | ELINE
  | ELAN
]

type internal_virtual_link_descriptor = {
  id : string;
  name : string;
  ?short_name : string option;
  ?description : string option;
  ?vl_type : vl_kind option;
  ?root_bandwidth : int option;
  ?leaf_bandwidth : int option;
  int_cps : string list;
}

(* CPD as ETSI NFV IFA 011 *)
(*
type layer_protocols = [
  | ETHERNET
  | MPLS
  | ODU2
  | IPV4
  | IPV6
  | PSEUDOWIRE
]

type cp_roles = [
  | ROOT
  | LEAF
]


type address_kind = [
  | MAC
  | IP
]

type ip_address_kind = [
  | IPV4
  | IPV6
]


type virtual_network_interface_requirement = {
  name : string;
  descripttion : string;
  support_mandatory : bool;
  requirement : string;
}

type l3_address_datas = {
  ip_address_assignment : bool;
  floating_ip_activated : bool;
  ip_address_type : ip_address_kind;
  number_of_ip_address : int;
}

type address_datas = {
  address_type : address_kind;
  l2_address_data : string;
  l3_address_data : l3_address_datas;
}

type connection_point_descriptor = {
  cpd_id : string;
  layer_protocol : layer_protocols;
  cp_role : cp_roles;
  description : string;
  address_data : address_datas;
} *)


(*
  A VnfExtCpd is a type of Cpd and describes an external interface, a.k.a external CP, exposed by this VNF enabling connection with a VL.
  A VnfExtCpd inherits from the Cpd Class (see clause 7.1.6.3). All attributes of the Cpd are also attributes of the VnfExtCpd.
  When the VnfExtCpd is mapped to a VduCpd, the values for the attributes type, subType and description shall be identical for both elements.
*)

(* type vnf_ext_cpd {
    cpd_id : string;
    layer_protocol : layer_protocols;
    cp_role : cp_roles;
    description : string;
    address_data : address_datas;
    (* New attributes *)
    int_virtual_link_desc : string; (* Refers to an internal VLD *)
    int_cpd : string; (* Refers to an internal Cpd, either int_virtual_link_desc or int_cpd shall be present *)
    virtual_network_interface_requirements : virtual_network_interface_requirement list;
   } *)



(* VLD as ETSI NFV IFA 011 *)


(* type vl_flow_pattern_kind = [
   | LINE
   | MESH
   | TREE
   ]

   type vl_flavour_bitrate_requirements = {
   root : int;
   leaf : int;
   }

   type vl_flavour_qos = {
   latency : int; (* latency in ms *)
   packet_delay_variation: int; (* jitter in ms *)
   packet_loss_ration : float;
   }

   type vl_flavour = {
   flavour_id : string;
   bitrate_requirement : vl_flavour_bitrate_requirements;
   qos : vl_flavour_qos;
   }

   type vl_connectivity_type = {
   layer_protocol : layer_protocols;
   flow_pattern : vl_flow_pattern_kind;
   }

   type vnf_monitoring_paramter = {
   id : string;
   name : string;
   performance_metric : string;
   }

   type vnf_virtual_link_desc = {
   virtual_link_desc_id : string;
   virtual_link_desc_flavour : vl_flavour;
   connectivity_type : vl_connectivity_type;
   test_access : string;
   description : string;
   monitoring_parameter : vnf_monitoring_paramter list;
   } *)



(* Record Related Types *)


type fdu_state = [
  | DEFINE
  | CONFIGURE
  | CLEAN
  | RUN
  | STARTING
  | STOP
  | RESUME
  | PAUSE
  | SCALE
  | TAKE_OFF
  | LAND
  | MIGRATE
  | UNDEFINE
  | ERROR
]


(*
type error_code = [
  | DEFINE_ERROR of 1
  | CONFIGURE_ERROR of 2
  | CLEAN_ERROR of 3
  | RUN_ERROR of 4
  | STOP_ERROR of 5
  | PAUSE_ERROR of 6
  | SCALE_ERROR of 7
  | TAKE_OFF_ERROR of 8
  | LAND_ERROR of 9
  | MIGRATE_ERROR of 10
  | UNDEFINE_ERROR of 0
]
*)

type net_state = [
  | CREATE
  | CONNECTED
  | DISCONNECTED
  | DESTROY
]


type migration_properties = {
  destination : string;
  source : string;
}


type record = {
  fdu_uuid : string; (* Reference to the descitptor *)
  node : string; (* Node this instance is running on *)
  ?uuid : string option; (* UUID of the instance *)
  status : fdu_state; (* Instance Status *)
  interfaces : interface_record list; (* List of interfaces *)
  connection_points : connection_point_record list; (* List of connection points *)
  ?error_code : int option;  (* To be filled is status is error *)
  ?error_msg : string option;
  ?migration_properties : migration_properties option; (* Information to be used during migartion process *)
  hypervisor_info : json; (* This depends on the HV used *)
  accelerators : accelerators_record; (* Infomation about the accelerators used by this instance *)
  io_ports : string list; (* Information about the I/O ports used by this instance *)
}

type accelerators_record = {
  fpga: string list;
  gpu: string list;
}

type interface_record = {
  vintf_name : string;
  status : net_state;
  if_type : vintf_t;
  ?mac_address : string option;
  ?phy_face : string option;
  ?cp_id : string option;
  ?veth_face_name: string option;
  ?properties : json option;
}

type connection_point_record = {

  uuid: string;
  status : net_state;
  cp_uuid : string; (* Reference to CP uuid inside descriptor *)
  ?veth_face_name : string option;
  ?br_name : string option;
  ?properties : json option;
}







